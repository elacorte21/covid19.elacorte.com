{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","isLoading","countries","error","fetch","then","res","json","data","countryId","countryCode","setState","catch","this","fetchCountries","Fragment","message","map","country","percentage","value","total","toFixed","key","combinedKey","countryRegion","className","recovered","confirmed","deaths","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"4NA2EeA,G,kNAvEbC,MAAQ,CACNC,WAAW,EACXC,UAAW,GACXC,MAAO,M,+DAGS,IAAD,OACfC,MAAM,uCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAAYD,EAAKE,YACvB,OAAON,MAAM,4CAA8CK,EAAY,iBAExEJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OACR,EAAKG,SAAS,CACZT,UAAWM,EACXP,WAAW,OAGdW,OAAM,SAAAT,GAAK,OAAI,EAAKQ,SAAS,CAAER,QAAOF,WAAW,S,0CAIpDY,KAAKC,mB,+BAGG,IAAD,EACiCD,KAAKb,MAArCC,EADD,EACCA,UAAWC,EADZ,EACYA,UAAWC,EADvB,EACuBA,MAC9B,OACE,kBAAC,IAAMY,SAAP,KACE,wCACCZ,EAAQ,2BAAIA,EAAMa,SAAe,KAChCf,EA+BE,0CA9BFC,EAAUe,KAAI,SAAAC,GACZ,IAAMC,EAAa,SAACC,EAAOC,GACzB,OAASD,EAAQC,EAAS,KAAKC,WAGjC,OACE,yBAAKC,IAAKL,EAAQM,aAEhB,4BAAKN,EAAQO,eAEb,yBAAKC,UAAU,iBACb,yCACA,4BAAKR,EAAQS,WACZR,EAAWD,EAAQS,UAAWT,EAAQU,WAHzC,KAMA,yBAAKF,UAAU,iBACb,qCACA,4BAAKR,EAAQU,YAGf,yBAAKF,UAAU,gBACb,wCACA,4BAAKR,EAAQW,QACZV,EAAWD,EAAQW,OAAQX,EAAQU,WAHtC,c,GAxDEE,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAT,GACL4C,QAAQ5C,MAAMA,EAAMa,a","file":"static/js/main.fe6d5f31.chunk.js","sourcesContent":["import React from 'react';\nimport './Assets/css/style.css';\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    countries: [],\n    error: null\n  };\n\n  fetchCountries() {\n    fetch('https://extreme-ip-lookup.com/json/')\n      .then(res => res.json())\n      .then(data => {\n        const countryId = data.countryCode;\n        return fetch('https://covid19.mathdro.id/api/countries/' + countryId + '/confirmed'); // make a 2nd request and return a promise\n      })\n      .then(res => res.json())\n      .then(data =>\n        this.setState({\n          countries: data,\n          isLoading: false\n        })\n      )\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  componentDidMount() {\n    this.fetchCountries();\n  }\n\n  render() {\n    const { isLoading, countries, error } = this.state;\n    return (\n      <React.Fragment>\n        <h1>COVID-19</h1>\n        {error ? <p>{error.message}</p> : null}\n        {!isLoading ? (\n          countries.map(country => {\n            const percentage = (value, total) => {\n              return ((value / total) * 100).toFixed();\n            };\n\n            return (\n              <div key={country.combinedKey}>\n\n                <h2>{country.countryRegion}</h2>\n\n                <div className=\"caseRecovered\">\n                  <h4>Recovered</h4>\n                  <h3>{country.recovered}</h3>\n                  {percentage(country.recovered, country.confirmed)}%\n                </div>\n\n                <div className=\"caseConfirmed\">\n                  <h4>Cases</h4>\n                  <h2>{country.confirmed}</h2>\n                </div>\n\n                <div className=\"caseDeceased\">\n                  <h4>Deceased</h4>\n                  <h3>{country.deaths}</h3>\n                  {percentage(country.deaths, country.confirmed)}%\n                </div>\n              </div>\n            );\n          })\n        ) : (\n            <h3>Loading...</h3>\n          )}\n      </React.Fragment >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}